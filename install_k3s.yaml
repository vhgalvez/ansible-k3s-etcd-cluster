- name: Instalar y Configurar K3s con etcd en el Clúster
  hosts: all
  become: true
  gather_facts: no # Disable gathering facts to avoid Python dependency on Flatcar

  vars:
    k3s_url: "https://github.com/k3s-io/k3s/releases/latest/download/k3s"
    k3s_token_path: "/var/lib/rancher/k3s/server/node-token"
    k3s_server_ip: "10.17.4.21" # IP del nodo maestro principal
    etcd_endpoint: "10.17.4.21:2379" # Update with the correct etcd endpoint

  tasks:
    - name: Asegurar que el directorio /opt/bin existe
      ansible.builtin.raw: mkdir -p /opt/bin

    - name: Descargar e instalar K3s en todos los nodos
      ansible.builtin.raw: |
        curl -Lo /opt/bin/k3s "{{ k3s_url }}" && chmod +x /opt/bin/k3s
      args:
        timeout: 600
      when: inventory_hostname in groups['masters'] + groups['workers']

    - name: Crear enlaces simbólicos para herramientas de K3s en Flatcar
      ansible.builtin.raw: |
        ln -sf /opt/bin/k3s /opt/bin/kubectl
        ln -sf /opt/bin/k3s /opt/bin/crictl
        ln -sf /opt/bin/k3s /opt/bin/ctr
      when: inventory_hostname in groups['masters'] + groups['workers']

    - name: Verificar conectividad con el endpoint de etcd
      ansible.builtin.raw: |
        nc -zv {{ etcd_endpoint.split(':')[0] }} {{ etcd_endpoint.split(':')[1] }}
      register: etcd_connectivity
      failed_when: etcd_connectivity.rc != 0
      when: inventory_hostname == k3s_server_ip

    - name: Asegurar que etcd está corriendo en el nodo maestro principal
      ansible.builtin.raw: |
        docker run -d --name etcd \
          -p 2379:2379 \
          -p 2380:2380 \
          --volume=/etcd-data:/etcd-data \
          quay.io/coreos/etcd:v3.4.13 \
          /usr/local/bin/etcd \
          --data-dir=/etcd-data \
          --name node1 \
          --initial-advertise-peer-urls http://{{ k3s_server_ip }}:2380 \
          --listen-peer-urls http://0.0.0.0:2380 \
          --advertise-client-urls http://{{ k3s_server_ip }}:2379 \
          --listen-client-urls http://0.0.0.0:2379 \
          --initial-cluster node1=http://{{ k3s_server_ip }}:2380 \
          --initial-cluster-token etcd-cluster-1 \
          --initial-cluster-state new
      when: inventory_hostname == k3s_server_ip and etcd_connectivity.rc != 0

    - name: Configurar servicio K3s en el primer nodo maestro
      ansible.builtin.raw: |
        cat <<EOF > /etc/systemd/system/k3s.service
        [Unit]
        Description=Lightweight Kubernetes
        Documentation=https://k3s.io
        Wants=network-online.target
        After=network-online.target

        [Service]
        Type=exec
        ExecStart=/opt/bin/k3s server --cluster-init --datastore-endpoint='etcd://{{ etcd_endpoint }}' --tls-san {{ k3s_server_ip }}
        Restart=on-failure
        KillMode=process
        Delegate=yes
        LimitNOFILE=1048576
        LimitNPROC=1048576
        LimitCORE=infinity

        [Install]
        WantedBy=multi-user.target
        EOF
      when: inventory_hostname == k3s_server_ip

    - name: Recargar e iniciar K3s en el primer nodo maestro
      ansible.builtin.raw: |
        systemctl daemon-reload
        systemctl enable k3s
        systemctl start k3s
      when: inventory_hostname == k3s_server_ip

    - name: Verificar el estado del servicio K3s en el primer nodo maestro
      ansible.builtin.raw: systemctl status k3s -l
      when: inventory_hostname == k3s_server_ip

    - name: Obtener los logs del servicio K3s en el primer nodo maestro
      ansible.builtin.raw: journalctl -u k3s -n 100 --no-pager
      when: inventory_hostname == k3s_server_ip

    - name: Obtener el token de K3s desde el primer nodo maestro
      ansible.builtin.raw: cat "{{ k3s_token_path }}"
      register: k3s_token
      delegate_to: "{{ k3s_server_ip }}"
      run_once: true
      failed_when: k3s_token.rc != 0

    - name: Obtener los logs del servicio K3s si el token no se encuentra
      ansible.builtin.raw: journalctl -u k3s -n 100 --no-pager
      when: k3s_token.rc != 0
      delegate_to: "{{ k3s_server_ip }}"
      run_once: true

    - name: Configurar nodos maestros adicionales para unirse al clúster
      ansible.builtin.raw: |
        cat <<EOF > /etc/systemd/system/k3s.service
        [Unit]
        Description=Lightweight Kubernetes
        Documentation=https://k3s.io
        Wants=network-online.target
        After=network-online.target

        [Service]
        Type=exec
        ExecStart=/opt/bin/k3s server --server https://{{ k3s_server_ip }}:6443 --token {{ k3s_token.stdout }} --datastore-endpoint='etcd://{{ etcd_endpoint }}' --tls-san {{ k3s_server_ip }}
        Restart=on-failure
        KillMode=process
        Delegate=yes
        LimitNOFILE=1048576
        LimitNPROC=1048576
        LimitCORE=infinity

        [Install]
        WantedBy=multi-user.target
        EOF
      when: inventory_hostname in groups['masters'] and inventory_hostname != k3s_server_ip

    - name: Recargar e iniciar K3s en nodos maestros adicionales
      ansible.builtin.raw: |
        systemctl daemon-reload
        systemctl enable k3s
        systemctl start k3s
      when: inventory_hostname in groups['masters'] and inventory_hostname != k3s_server_ip

    - name: Configurar nodos trabajadores para unirse al clúster
      ansible.builtin.raw: |
        cat <<EOF > /etc/systemd/system/k3s-agent.service
        [Unit]
        Description=Lightweight Kubernetes
        Documentation=https://k3s.io
        Wants=network-online.target
        After=network-online.target

        [Service]
        Type=exec
        ExecStart=/opt/bin/k3s agent --server https://{{ k3s_server_ip }}:6443 --token {{ k3s_token.stdout }} --node-ip {{ ansible_host }}
        Restart=always
        LimitNOFILE=1048576
        LimitNPROC=1048576
        LimitCORE=infinity

        [Install]
        WantedBy=multi-user.target
        EOF
      when: inventory_hostname in groups['workers']

    - name: Recargar e iniciar K3s en los nodos trabajadores
      ansible.builtin.raw: |
        systemctl daemon-reload
        systemctl enable k3s-agent
        systemctl start k3s-agent
      when: inventory_hostname in groups['workers']

    - name: Configurar permisos y kubeconfig en los nodos para acceso a k3s
      ansible.builtin.raw: |
        if [ -f /etc/rancher/k3s/k3s.yaml ]; then
          mkdir -p /home/core/.kube && \
          cp /etc/rancher/k3s/k3s.yaml /home/core/.kube/config && \
          sed -i 's/127.0.0.1/{{ k3s_server_ip }}/g' /home/core/.kube/config && \
          chown core:core /home/core/.kube/config && \
          chmod 644 /home/core/.kube/config
        else
          echo "Archivo k3s.yaml no encontrado, omitiendo configuración en {{ inventory_hostname }}"
        fi
      when: inventory_hostname in groups['masters'] + groups['workers']

    - name: Copiar kubeconfig desde el nodo maestro principal a otros nodos
      ansible.builtin.raw: |
        scp core@{{ k3s_server_ip }}:/etc/rancher/k3s/k3s.yaml /etc/rancher/k3s/k3s.yaml
      when: inventory_hostname != k3s_server_ip
