- name: Instalar y Configurar K3s con alta disponibilidad (etcd) en el Clúster
  hosts: all
  become: true
  gather_facts: no

  vars:
    k3s_url: "https://github.com/k3s-io/k3s/releases/latest/download/k3s"
    k3s_token_path: "/var/lib/rancher/k3s/server/node-token"
    vip_ip: "10.17.5.10"  # Usamos la IP VIP configurada
    k3s_master_ip: "10.17.4.21"  # Primer nodo master real

  tasks:
    # Asegurar que los directorios necesarios están creados usando raw
    - name: Asegurar directorios necesarios
      ansible.builtin.raw: |
        mkdir -p /opt/bin /etc/rancher/k3s /var/lib/rancher/k3s/server
      when: inventory_hostname in groups['masters'] + groups['longhorn_nodes']

    # Descargar e instalar K3s
    - name: Descargar e instalar K3s
      ansible.builtin.raw: |
        curl -Lo /opt/bin/k3s "{{ k3s_url }}" && chmod +x /opt/bin/k3s
      args:
        timeout: 600
      when: inventory_hostname in groups['masters'] + groups['longhorn_nodes']

    # Verificar que el binario no está en uso
    - name: Verificar que el binario no está en uso
      ansible.builtin.raw: fuser -k /opt/bin/k3s || true
      when: inventory_hostname == k3s_master_ip

    # Crear enlaces simbólicos para kubectl y otros binarios
    - name: Crear enlaces simbólicos
      ansible.builtin.raw: |
        ln -sf /opt/bin/k3s /opt/bin/kubectl
        ln -sf /opt/bin/k3s /opt/bin/crictl
        ln -sf /opt/bin/k3s /opt/bin/ctr
      when: inventory_hostname in groups['masters'] + groups['longhorn_nodes']

    # Configurar el primer nodo master (debe ser el nodo real, no la VIP)
    - name: Configurar primer nodo master
      ansible.builtin.raw: |
        cat <<EOF > /etc/systemd/system/k3s.service
        [Unit]
        Description=Lightweight Kubernetes
        Wants=network-online.target
        After=network-online.target

        [Service]
        Type=notify
        ExecStartPre=-/sbin/modprobe br_netfilter
        ExecStartPre=-/sbin/modprobe overlay
        ExecStart=/opt/bin/k3s server \
          --cluster-init \
          --disable traefik \
          --tls-san {{ vip_ip }} \
          --write-kubeconfig /etc/rancher/k3s/k3s.yaml \
          --write-kubeconfig-mode 644
        Restart=always
        KillMode=process
        Delegate=yes
        LimitNOFILE=1048576
        LimitNPROC=infinity
        LimitCORE=infinity

        [Install]
        WantedBy=multi-user.target
        EOF
      when: inventory_hostname == k3s_master_ip

    # Iniciar el primer nodo master
    - name: Iniciar primer nodo master
      ansible.builtin.raw: |
        systemctl daemon-reload
        systemctl enable k3s
        systemctl start k3s
        systemctl is-active k3s
      register: k3s_start
      when: inventory_hostname == k3s_master_ip

    # Mostrar logs de K3s para depuración
    - name: Mostrar logs de k3s
      ansible.builtin.raw: journalctl -u k3s -n 100 --no-pager
      register: k3s_logs
      when: inventory_hostname == k3s_master_ip

    - name: Debug logs
      ansible.builtin.debug:
        var: k3s_logs.stdout_lines
      when: inventory_hostname == k3s_master_ip

    # Esperar a que K3s esté activo
    - name: Esperar a que K3s esté activo
      ansible.builtin.raw: |
        timeout=120
        while ! systemctl is-active k3s >/dev/null 2>&1 && [ $timeout -gt 0 ]; do
          echo "Esperando a que K3s esté activo... ($timeout s restantes)"
          sleep 5
          timeout=$((timeout-5))
        done
        [ $timeout -le 0 ] && echo "Timeout" && exit 1 || true
      when: inventory_hostname == k3s_master_ip

    # Esperar que el token del master esté disponible
    - name: Esperar que el token del master esté disponible
      ansible.builtin.raw: |
        timeout=120
        while [ ! -f "{{ k3s_token_path }}" ] && [ $timeout -gt 0 ]; do
          echo "Esperando el archivo node-token... ($timeout s restantes)"
          sleep 5
          timeout=$((timeout-5))
        done
        [ $timeout -le 0 ] && echo "Timeout al esperar el token" && exit 1 || true
      when: inventory_hostname == k3s_master_ip

    # Obtener el token del primer nodo master
    - name: Obtener token del master
      ansible.builtin.raw: cat "{{ k3s_token_path }}"
      register: k3s_token
      delegate_to: "{{ k3s_master_ip }}"
      run_once: true
      failed_when: k3s_token.rc != 0

    # Configurar nodos masters secundarios
    - name: Configurar nodos masters secundarios
      ansible.builtin.raw: |
        cat <<EOF > /etc/systemd/system/k3s.service
        [Unit]
        Description=Lightweight Kubernetes
        Wants=network-online.target
        After=network-online.target

        [Service]
        Type=notify
        ExecStartPre=-/sbin/modprobe br_netfilter
        ExecStartPre=-/sbin/modprobe overlay
        ExecStart=/opt/bin/k3s server \
          --server https://{{ vip_ip }}:6443 \
          --token {{ k3s_token.stdout }} \
          --disable traefik \
          --tls-san {{ vip_ip }} \
          --node-name {{ inventory_hostname }}
        Restart=always
        KillMode=process
        Delegate=yes
        LimitNOFILE=1048576
        LimitNPROC=infinity
        LimitCORE=infinity

        [Install]
        WantedBy=multi-user.target
        EOF
      when: inventory_hostname in groups['masters'] and inventory_hostname != k3s_master_ip

    # Iniciar K3s en nodos masters secundarios
    - name: Iniciar K3s en nodos masters secundarios
      ansible.builtin.raw: |
        systemctl daemon-reload
        systemctl enable k3s
        systemctl start k3s
        systemctl is-active k3s
      register: k3s_join_start
      when: inventory_hostname in groups['masters'] and inventory_hostname != k3s_master_ip

    # Esperar que K3s esté activo en los nodos secundarios
    - name: Esperar que K3s esté activo (masters secundarios)
      ansible.builtin.raw: |
        timeout=120
        while ! systemctl is-active k3s >/dev/null 2>&1 && [ $timeout -gt 0 ]; do
          echo "Esperando a que K3s esté activo... ($timeout s restantes)"
          sleep 5
          timeout=$((timeout-5))
        done
        [ $timeout -le 0 ] && echo "Timeout" && exit 1 || true
      when: inventory_hostname in groups['masters'] and inventory_hostname != k3s_master_ip

    # Configurar nodos longhorn/workers
    - name: Configurar nodos longhorn/workers
      ansible.builtin.raw: |
        cat <<EOF > /etc/systemd/system/k3s-agent.service
        [Unit]
        Description=Lightweight Kubernetes Node
        After=network-online.target

        [Service]
        Type=exec
        ExecStart=/opt/bin/k3s agent \
          --server https://{{ vip_ip }}:6443 \
          --token {{ k3s_token.stdout }} \
          --node-ip {{ ansible_host }}
        Restart=always
        LimitNOFILE=1048576
        LimitNPROC=1048576
        LimitCORE=infinity

        [Install]
        WantedBy=multi-user.target
        EOF
      when: inventory_hostname in groups['longhorn_nodes']

    # Iniciar K3s-agent en los nodos longhorn/workers
    - name: Iniciar K3s-agent en nodos longhorn/workers
      ansible.builtin.raw: |
        systemctl daemon-reload
        systemctl enable k3s-agent
        systemctl start k3s-agent
        systemctl is-active k3s-agent
      register: k3s_agent_start
      when: inventory_hostname in groups['longhorn_nodes']

    # Esperar que k3s-agent esté activo
    - name: Esperar que k3s-agent esté activo
      ansible.builtin.raw: |
        timeout=120
        while ! systemctl is-active k3s-agent >/dev/null 2>&1 && [ $timeout -gt 0 ]; do
          echo "Esperando a que K3s-agent esté activo... ($timeout s restantes)"
          sleep 5
          timeout=$((timeout-5))
        done
        [ $timeout -le 0 ] && echo "Timeout" && exit 1 || true
      when: inventory_hostname in groups['longhorn_nodes']

    # Configurar kubeconfig en todos los nodos relevantes
    - name: Configurar kubeconfig en todos los nodos relevantes
      ansible.builtin.raw: |
        if [ -f /etc/rancher/k3s/k3s.yaml ]; then
          mkdir -p /home/core/.kube && \
          cp /etc/rancher/k3s/k3s.yaml /home/core/.kube/config && \
          sed -i 's/127.0.0.1/{{ vip_ip }}/g' /home/core/.kube/config && \
          chown core:core /home/core/.kube/config && \
          chmod 644 /home/core/.kube/config
        fi
      when: inventory_hostname in groups['masters'] or inventory_hostname in groups['longhorn_nodes']