- name: Instalar y Configurar K3s con etcd en el Clúster (con VIP en SAN)
  hosts: all
  become: true
  gather_facts: no

  vars:
    k3s_url: "https://github.com/k3s-io/k3s/releases/latest/download/k3s"
    k3s_token_path: "/var/lib/rancher/k3s/server/node-token"
    k3s_server_ip: "10.17.4.21"
    k3s_vip: "10.17.5.10"

  tasks:
    - name: Crear directorios necesarios
      ansible.builtin.raw: |
        mkdir -p /opt/bin
        mkdir -p /etc/rancher/k3s
        mkdir -p /var/lib/rancher/k3s/server
      when: inventory_hostname in groups['masters'] + groups['workers']

    - name: Descargar e instalar K3s
      ansible.builtin.raw: |
        curl -Lo /opt/bin/k3s "{{ k3s_url }}" && chmod +x /opt/bin/k3s
      args:
        timeout: 600
      when: inventory_hostname in groups['masters'] + groups['workers']

    - name: Crear enlaces simbólicos en Flatcar
      ansible.builtin.raw: |
        ln -sf /opt/bin/k3s /opt/bin/kubectl
        ln -sf /opt/bin/k3s /opt/bin/crictl
        ln -sf /opt/bin/k3s /opt/bin/ctr
      when: inventory_hostname in groups['masters'] + groups['workers']

    - name: Configurar servicio K3s en primer master
      ansible.builtin.raw: |
        cat <<EOF > /etc/systemd/system/k3s.service
        [Unit]
        Description=Lightweight Kubernetes
        Wants=network-online.target
        After=network-online.target

        [Service]
        Type=notify
        ExecStartPre=-/sbin/modprobe br_netfilter
        ExecStartPre=-/sbin/modprobe overlay
        ExecStart=/opt/bin/k3s server \
            --cluster-init \
            --tls-san {{ k3s_server_ip }} \
            --tls-san {{ k3s_vip }} \
            --write-kubeconfig /etc/rancher/k3s/k3s.yaml \
            --write-kubeconfig-mode 644
        Restart=always
        KillMode=process
        Delegate=yes
        LimitNOFILE=1048576
        LimitNPROC=infinity
        LimitCORE=infinity

        [Install]
        WantedBy=multi-user.target
        EOF
      when: inventory_hostname == k3s_server_ip

    - name: Recargar e iniciar K3s en el primer nodo
      ansible.builtin.raw: |
        systemctl daemon-reload
        systemctl enable k3s
        systemctl restart k3s
      when: inventory_hostname == k3s_server_ip

    - name: Obtener token del primer nodo
      ansible.builtin.raw: cat "{{ k3s_token_path }}"
      register: k3s_token
      delegate_to: "{{ k3s_server_ip }}"
      run_once: true
      failed_when: k3s_token.rc != 0

    - name: Configurar nodos masters adicionales
      ansible.builtin.raw: |
        cat <<EOF > /etc/systemd/system/k3s.service
        [Unit]
        Description=Lightweight Kubernetes
        Wants=network-online.target
        After=network-online.target

        [Service]
        Type=notify
        ExecStartPre=-/sbin/modprobe br_netfilter
        ExecStartPre=-/sbin/modprobe overlay
        ExecStart=/opt/bin/k3s server \
            --server https://{{ k3s_vip }}:6443 \
            --token {{ k3s_token.stdout }} \
            --tls-san {{ k3s_server_ip }} \
            --tls-san {{ k3s_vip }} \
            --node-name {{ inventory_hostname }}
        Restart=always
        KillMode=process
        Delegate=yes
        LimitNOFILE=1048576
        LimitNPROC=infinity
        LimitCORE=infinity

        [Install]
        WantedBy=multi-user.target
        EOF
      when: inventory_hostname in groups['masters'] and inventory_hostname != k3s_server_ip

    - name: Recargar e iniciar servicio en masters adicionales
      ansible.builtin.raw: |
        systemctl daemon-reload
        systemctl enable k3s
        systemctl restart k3s
      when: inventory_hostname in groups['masters'] and inventory_hostname != k3s_server_ip

    - name: Configurar nodos workers
      ansible.builtin.raw: |
        cat <<EOF > /etc/systemd/system/k3s-agent.service
        [Unit]
        Description=Lightweight Kubernetes Node
        After=network-online.target

        [Service]
        Type=exec
        ExecStart=/opt/bin/k3s agent \
          --server https://{{ k3s_vip }}:6443 \
          --token {{ k3s_token.stdout }} \
          --node-ip {{ ansible_host }}
        Restart=always
        LimitNOFILE=1048576
        LimitNPROC=1048576
        LimitCORE=infinity

        [Install]
        WantedBy=multi-user.target
        EOF
      when: inventory_hostname in groups['workers']

    - name: Recargar e iniciar k3s-agent en workers
      ansible.builtin.raw: |
        systemctl daemon-reload
        systemctl enable k3s-agent
        systemctl restart k3s-agent
      when: inventory_hostname in groups['workers']

    - name: Copiar kubeconfig al nodo local y reemplazar IP por VIP
      ansible.builtin.raw: |
        cp /etc/rancher/k3s/k3s.yaml /home/core/.kube/config && \
        sed -i 's/127.0.0.1/{{ k3s_vip }}/g' /home/core/.kube/config && \
        chown core:core /home/core/.kube/config && \
        chmod 644 /home/core/.kube/config
      when: inventory_hostname == k3s_server_ip