- name: Instalar y Configurar K3s con etcd en el Clúster
  hosts: all
  become: true
  gather_facts: no # Disable gathering facts to avoid Python dependency on Flatcar

  vars:
    k3s_url: "https://github.com/k3s-io/k3s/releases/latest/download/k3s"
    k3s_token_path: "/var/lib/rancher/k3s/server/node-token"
    k3s_server_ip: "10.17.4.21" # IP del nodo maestro principal

  tasks:
    - name: Asegurar que los directorios necesarios existen
      ansible.builtin.raw: |
        mkdir -p /opt/bin
        mkdir -p /etc/rancher/k3s
        mkdir -p /var/lib/rancher/k3s/server
      when: inventory_hostname in groups['masters'] + groups['workers']

    - name: Descargar e instalar K3s en todos los nodos
      ansible.builtin.raw: |
        curl -Lo /opt/bin/k3s "{{ k3s_url }}" && chmod +x /opt/bin/k3s
      args:
        timeout: 600
      when: inventory_hostname in groups['masters'] + groups['workers']

    - name: Verificar que el binario de K3s no está en uso
      ansible.builtin.raw: |
        fuser -k /opt/bin/k3s || true
      when: inventory_hostname == k3s_server_ip

    - name: Crear enlaces simbólicos para herramientas de K3s en Flatcar
      ansible.builtin.raw: |
        ln -sf /opt/bin/k3s /opt/bin/kubectl
        ln -sf /opt/bin/k3s /opt/bin/crictl
        ln -sf /opt/bin/k3s /opt/bin/ctr
      when: inventory_hostname in groups['masters'] + groups['workers']

    - name: Configurar servicio K3s en el primer nodo maestro
      ansible.builtin.template:
        src: k3s_master.service.j2
        dest: /etc/systemd/system/k3s.service
      when: inventory_hostname == k3s_server_ip

    - name: Recargar e iniciar K3s en el primer nodo maestro
      ansible.builtin.raw: |
        systemctl daemon-reload
        systemctl enable k3s
        systemctl start k3s
      when: inventory_hostname == k3s_server_ip
      register: k3s_start
      ignore_errors: yes

    - name: Obtener los logs del servicio K3s en el primer nodo maestro si falla
      ansible.builtin.raw: journalctl -u k3s -n 100 --no-pager
      register: k3s_logs
      when: k3s_start.failed and inventory_hostname == k3s_server_ip

    - name: Mostrar logs del servicio K3s si falla
      ansible.builtin.debug:
        var: k3s_logs.stdout_lines
      when: k3s_start.failed and inventory_hostname == k3s_server_ip

    - name: Esperar a que K3s esté listo
      ansible.builtin.raw: |
        timeout=120
        while ! systemctl is-active k3s >/dev/null 2>&1 && [ $timeout -gt 0 ]; do
          echo "Esperando a que K3s esté activo... ($timeout segundos restantes)"
          sleep 5
          timeout=$((timeout-5))
        done
        if [ $timeout -le 0 ]; then
          echo "Timeout esperando a que K3s esté activo"
          exit 1
        fi
      when: inventory_hostname == k3s_server_ip and not k3s_start.failed

    - name: Obtener el token de K3s desde el primer nodo maestro
      ansible.builtin.raw: cat "{{ k3s_token_path }}"
      register: k3s_token
      delegate_to: "{{ k3s_server_ip }}"
      run_once: true
      failed_when: k3s_token.rc != 0

    - name: Obtener los logs del servicio K3s si el token no se encuentra
      ansible.builtin.raw: journalctl -u k3s -n 100 --no-pager
      when: k3s_token.rc != 0
      delegate_to: "{{ k3s_server_ip }}"
      run_once: true

    - name: Configurar nodos maestros adicionales para unirse al clúster
      ansible.builtin.template:
        src: k3s_master_join.service.j2
        dest: /etc/systemd/system/k3s.service
      when: inventory_hostname in groups['masters'] and inventory_hostname != k3s_server_ip

    - name: Recargar e iniciar K3s en nodos maestros adicionales
      ansible.builtin.raw: |
        systemctl daemon-reload
        systemctl enable k3s
        systemctl start k3s
      when: inventory_hostname in groups['masters'] and inventory_hostname != k3s_server_ip

    - name: Configurar nodos trabajadores para unirse al clúster
      ansible.builtin.template:
        src: k3s_agent.service.j2
        dest: /etc/systemd/system/k3s-agent.service
      when: inventory_hostname in groups['workers']

    - name: Recargar e iniciar K3s en los nodos trabajadores
      ansible.builtin.raw: |
        systemctl daemon-reload
        systemctl enable k3s-agent
        systemctl start k3s-agent
      when: inventory_hostname in groups['workers']

    - name: Configurar permisos y kubeconfig en los nodos para acceso a k3s
      ansible.builtin.raw: |
        if [ -f /etc/rancher/k3s/k3s.yaml ]; then
          mkdir -p /home/core/.kube && \
          cp /etc/rancher/k3s/k3s.yaml /home/core/.kube/config && \
          sed -i 's/127.0.0.1/{{ k3s_server_ip }}/g' /home/core/.kube/config && \
          chown core:core /home/core/.kube/config && \
          chmod 644 /home/core/.kube/config
        else
          echo "Archivo k3s.yaml no encontrado, omitiendo configuración en {{ inventory_hostname }}"
        fi
      when: inventory_hostname in groups['masters'] + groups['workers']

    - name: Copiar kubeconfig desde el nodo maestro principal a otros nodos
      ansible.builtin.raw: |
        scp core@{{ k3s_server_ip }}:/etc/rancher/k3s/k3s.yaml /etc/rancher/k3s/k3s.yaml
      when: inventory_hostname != k3s_server_ip
